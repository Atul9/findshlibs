// automatically generated by rust-bindgen

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const PT_NULL: ::std::os::raw::c_uint = 0;
pub const PT_LOAD: ::std::os::raw::c_uint = 1;
pub const PT_DYNAMIC: ::std::os::raw::c_uint = 2;
pub const PT_INTERP: ::std::os::raw::c_uint = 3;
pub const PT_NOTE: ::std::os::raw::c_uint = 4;
pub const PT_SHLIB: ::std::os::raw::c_uint = 5;
pub const PT_PHDR: ::std::os::raw::c_uint = 6;
pub const PT_TLS: ::std::os::raw::c_uint = 7;
pub const PT_NUM: ::std::os::raw::c_uint = 8;
pub const PT_LOOS: ::std::os::raw::c_uint = 1610612736;
pub const PT_GNU_EH_FRAME: ::std::os::raw::c_uint = 1685382480;
pub const PT_GNU_STACK: ::std::os::raw::c_uint = 1685382481;
pub const PT_GNU_RELRO: ::std::os::raw::c_uint = 1685382482;
pub const PT_LOSUNW: ::std::os::raw::c_uint = 1879048186;
pub const PT_SUNWBSS: ::std::os::raw::c_uint = 1879048186;
pub const PT_SUNWSTACK: ::std::os::raw::c_uint = 1879048187;
pub const PT_HISUNW: ::std::os::raw::c_uint = 1879048191;
pub const PT_HIOS: ::std::os::raw::c_uint = 1879048191;
pub const PT_LOPROC: ::std::os::raw::c_uint = 1879048192;
pub const PT_HIPROC: ::std::os::raw::c_uint = 2147483647;
pub const PT_MIPS_REGINFO: ::std::os::raw::c_uint = 1879048192;
pub const PT_MIPS_RTPROC: ::std::os::raw::c_uint = 1879048193;
pub const PT_MIPS_OPTIONS: ::std::os::raw::c_uint = 1879048194;
pub const PT_MIPS_ABIFLAGS: ::std::os::raw::c_uint = 1879048195;
pub const PT_HP_TLS: ::std::os::raw::c_uint = 1610612736;
pub const PT_HP_CORE_NONE: ::std::os::raw::c_uint = 1610612737;
pub const PT_HP_CORE_VERSION: ::std::os::raw::c_uint = 1610612738;
pub const PT_HP_CORE_KERNEL: ::std::os::raw::c_uint = 1610612739;
pub const PT_HP_CORE_COMM: ::std::os::raw::c_uint = 1610612740;
pub const PT_HP_CORE_PROC: ::std::os::raw::c_uint = 1610612741;
pub const PT_HP_CORE_LOADABLE: ::std::os::raw::c_uint = 1610612742;
pub const PT_HP_CORE_STACK: ::std::os::raw::c_uint = 1610612743;
pub const PT_HP_CORE_SHM: ::std::os::raw::c_uint = 1610612744;
pub const PT_HP_CORE_MMF: ::std::os::raw::c_uint = 1610612745;
pub const PT_HP_PARALLEL: ::std::os::raw::c_uint = 1610612752;
pub const PT_HP_FASTBIND: ::std::os::raw::c_uint = 1610612753;
pub const PT_HP_OPT_ANNOT: ::std::os::raw::c_uint = 1610612754;
pub const PT_HP_HSL_ANNOT: ::std::os::raw::c_uint = 1610612755;
pub const PT_HP_STACK: ::std::os::raw::c_uint = 1610612756;
pub const PT_PARISC_ARCHEXT: ::std::os::raw::c_uint = 1879048192;
pub const PT_PARISC_UNWIND: ::std::os::raw::c_uint = 1879048193;
pub const PT_ARM_EXIDX: ::std::os::raw::c_uint = 1879048193;
pub const PT_IA_64_ARCHEXT: ::std::os::raw::c_uint = 1879048192;
pub const PT_IA_64_UNWIND: ::std::os::raw::c_uint = 1879048193;
pub const PT_IA_64_HP_OPT_ANOT: ::std::os::raw::c_uint = 1610612754;
pub const PT_IA_64_HP_HSL_ANOT: ::std::os::raw::c_uint = 1610612755;
pub const PT_IA_64_HP_STACK: ::std::os::raw::c_uint = 1610612756;
pub type Elf32_Half = u16;
pub type Elf64_Half = u16;
pub type Elf32_Word = u32;
pub type Elf32_Sword = i32;
pub type Elf64_Word = u32;
pub type Elf64_Sword = i32;
pub type Elf32_Xword = u64;
pub type Elf32_Sxword = i64;
pub type Elf64_Xword = u64;
pub type Elf64_Sxword = i64;
pub type Elf32_Addr = u32;
pub type Elf64_Addr = u64;
pub type Elf32_Off = u32;
pub type Elf64_Off = u64;
pub type Elf32_Section = u16;
pub type Elf64_Section = u16;
pub type Elf32_Versym = Elf32_Half;
pub type Elf64_Versym = Elf64_Half;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_1>(), 52usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_1>(), 4usize);
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Ehdr = _bindgen_ty_1;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_2 {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
#[test]
fn bindgen_test_layout__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2>(), 64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2>(), 8usize);
}
impl Clone for _bindgen_ty_2 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Ehdr = _bindgen_ty_2;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_3 {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3>(), 40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3>(), 4usize);
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Shdr = _bindgen_ty_3;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_4 {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>(), 64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>(), 8usize);
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Shdr = _bindgen_ty_4;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5 {
    pub ch_type: Elf32_Word,
    pub ch_size: Elf32_Word,
    pub ch_addralign: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5>(), 12usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5>(), 4usize);
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Chdr = _bindgen_ty_5;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6 {
    pub ch_type: Elf64_Word,
    pub ch_reserved: Elf64_Word,
    pub ch_size: Elf64_Xword,
    pub ch_addralign: Elf64_Xword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6>(), 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6>(), 8usize);
}
impl Clone for _bindgen_ty_6 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Chdr = _bindgen_ty_6;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7 {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf32_Section,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7>(), 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7>(), 4usize);
}
impl Clone for _bindgen_ty_7 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Sym = _bindgen_ty_7;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_8 {
    pub st_name: Elf64_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf64_Section,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_8() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8>(), 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8>(), 8usize);
}
impl Clone for _bindgen_ty_8 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Sym = _bindgen_ty_8;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9 {
    pub si_boundto: Elf32_Half,
    pub si_flags: Elf32_Half,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9>(), 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9>(), 2usize);
}
impl Clone for _bindgen_ty_9 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Syminfo = _bindgen_ty_9;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10 {
    pub si_boundto: Elf64_Half,
    pub si_flags: Elf64_Half,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>(), 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>(), 2usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Syminfo = _bindgen_ty_10;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11 {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>(), 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>(), 4usize);
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Rel = _bindgen_ty_11;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_12 {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_12() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12>(), 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12>(), 8usize);
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Rel = _bindgen_ty_12;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13 {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13>(), 12usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13>(), 4usize);
}
impl Clone for _bindgen_ty_13 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Rela = _bindgen_ty_13;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14 {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14>(), 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14>(), 8usize);
}
impl Clone for _bindgen_ty_14 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Rela = _bindgen_ty_14;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15 {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15>(), 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15>(), 4usize);
}
impl Clone for _bindgen_ty_15 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Phdr = _bindgen_ty_15;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_16 {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16>(), 56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16>(), 8usize);
}
impl Clone for _bindgen_ty_16 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Phdr = _bindgen_ty_16;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_17 {
    pub d_tag: Elf32_Sword,
    pub d_un: _bindgen_ty_17__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_17__bindgen_ty_1 {
    pub d_val: __BindgenUnionField<Elf32_Word>,
    pub d_ptr: __BindgenUnionField<Elf32_Addr>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_17__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17__bindgen_ty_1>(),
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17__bindgen_ty_1>(),
               4usize);
}
impl Clone for _bindgen_ty_17__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[test]
fn bindgen_test_layout__bindgen_ty_17() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17>(), 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17>(), 4usize);
}
impl Clone for _bindgen_ty_17 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Dyn = _bindgen_ty_17;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18 {
    pub d_tag: Elf64_Sxword,
    pub d_un: _bindgen_ty_18__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18__bindgen_ty_1 {
    pub d_val: __BindgenUnionField<Elf64_Xword>,
    pub d_ptr: __BindgenUnionField<Elf64_Addr>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18__bindgen_ty_1>(),
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18__bindgen_ty_1>(),
               8usize);
}
impl Clone for _bindgen_ty_18__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[test]
fn bindgen_test_layout__bindgen_ty_18() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18>(), 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18>(), 8usize);
}
impl Clone for _bindgen_ty_18 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Dyn = _bindgen_ty_18;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_19 {
    pub vd_version: Elf32_Half,
    pub vd_flags: Elf32_Half,
    pub vd_ndx: Elf32_Half,
    pub vd_cnt: Elf32_Half,
    pub vd_hash: Elf32_Word,
    pub vd_aux: Elf32_Word,
    pub vd_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_19() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_19>(), 20usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_19>(), 4usize);
}
impl Clone for _bindgen_ty_19 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Verdef = _bindgen_ty_19;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_20 {
    pub vd_version: Elf64_Half,
    pub vd_flags: Elf64_Half,
    pub vd_ndx: Elf64_Half,
    pub vd_cnt: Elf64_Half,
    pub vd_hash: Elf64_Word,
    pub vd_aux: Elf64_Word,
    pub vd_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_20() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20>(), 20usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20>(), 4usize);
}
impl Clone for _bindgen_ty_20 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Verdef = _bindgen_ty_20;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_21 {
    pub vda_name: Elf32_Word,
    pub vda_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_21() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_21>(), 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_21>(), 4usize);
}
impl Clone for _bindgen_ty_21 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Verdaux = _bindgen_ty_21;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_22 {
    pub vda_name: Elf64_Word,
    pub vda_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_22() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_22>(), 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_22>(), 4usize);
}
impl Clone for _bindgen_ty_22 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Verdaux = _bindgen_ty_22;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_23 {
    pub vn_version: Elf32_Half,
    pub vn_cnt: Elf32_Half,
    pub vn_file: Elf32_Word,
    pub vn_aux: Elf32_Word,
    pub vn_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_23() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_23>(), 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_23>(), 4usize);
}
impl Clone for _bindgen_ty_23 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Verneed = _bindgen_ty_23;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_24 {
    pub vn_version: Elf64_Half,
    pub vn_cnt: Elf64_Half,
    pub vn_file: Elf64_Word,
    pub vn_aux: Elf64_Word,
    pub vn_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_24() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_24>(), 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_24>(), 4usize);
}
impl Clone for _bindgen_ty_24 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Verneed = _bindgen_ty_24;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_25 {
    pub vna_hash: Elf32_Word,
    pub vna_flags: Elf32_Half,
    pub vna_other: Elf32_Half,
    pub vna_name: Elf32_Word,
    pub vna_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_25() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_25>(), 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_25>(), 4usize);
}
impl Clone for _bindgen_ty_25 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Vernaux = _bindgen_ty_25;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_26 {
    pub vna_hash: Elf64_Word,
    pub vna_flags: Elf64_Half,
    pub vna_other: Elf64_Half,
    pub vna_name: Elf64_Word,
    pub vna_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_26() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_26>(), 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_26>(), 4usize);
}
impl Clone for _bindgen_ty_26 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Vernaux = _bindgen_ty_26;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_27 {
    pub a_type: u32,
    pub a_un: _bindgen_ty_27__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_27__bindgen_ty_1 {
    pub a_val: __BindgenUnionField<u32>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_27__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_27__bindgen_ty_1>(),
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_27__bindgen_ty_1>(),
               4usize);
}
impl Clone for _bindgen_ty_27__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[test]
fn bindgen_test_layout__bindgen_ty_27() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_27>(), 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_27>(), 4usize);
}
impl Clone for _bindgen_ty_27 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_auxv_t = _bindgen_ty_27;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_28 {
    pub a_type: u64,
    pub a_un: _bindgen_ty_28__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_28__bindgen_ty_1 {
    pub a_val: __BindgenUnionField<u64>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout__bindgen_ty_28__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_28__bindgen_ty_1>(),
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_28__bindgen_ty_1>(),
               8usize);
}
impl Clone for _bindgen_ty_28__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[test]
fn bindgen_test_layout__bindgen_ty_28() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_28>(), 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_28>(), 8usize);
}
impl Clone for _bindgen_ty_28 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_auxv_t = _bindgen_ty_28;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_29 {
    pub n_namesz: Elf32_Word,
    pub n_descsz: Elf32_Word,
    pub n_type: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_29() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_29>(), 12usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_29>(), 4usize);
}
impl Clone for _bindgen_ty_29 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Nhdr = _bindgen_ty_29;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_30 {
    pub n_namesz: Elf64_Word,
    pub n_descsz: Elf64_Word,
    pub n_type: Elf64_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_30() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_30>(), 12usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_30>(), 4usize);
}
impl Clone for _bindgen_ty_30 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Nhdr = _bindgen_ty_30;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_31 {
    pub m_value: Elf32_Xword,
    pub m_info: Elf32_Word,
    pub m_poffset: Elf32_Word,
    pub m_repeat: Elf32_Half,
    pub m_stride: Elf32_Half,
}
#[test]
fn bindgen_test_layout__bindgen_ty_31() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_31>(), 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_31>(), 8usize);
}
impl Clone for _bindgen_ty_31 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Move = _bindgen_ty_31;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_32 {
    pub m_value: Elf64_Xword,
    pub m_info: Elf64_Xword,
    pub m_poffset: Elf64_Xword,
    pub m_repeat: Elf64_Half,
    pub m_stride: Elf64_Half,
}
#[test]
fn bindgen_test_layout__bindgen_ty_32() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_32>(), 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_32>(), 8usize);
}
impl Clone for _bindgen_ty_32 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Move = _bindgen_ty_32;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_33 {
    pub gt_header: __BindgenUnionField<_bindgen_ty_33__bindgen_ty_1>,
    pub gt_entry: __BindgenUnionField<_bindgen_ty_33__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_33__bindgen_ty_1 {
    pub gt_current_g_value: Elf32_Word,
    pub gt_unused: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_33__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_33__bindgen_ty_1>(),
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_33__bindgen_ty_1>(),
               4usize);
}
impl Clone for _bindgen_ty_33__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_33__bindgen_ty_2 {
    pub gt_g_value: Elf32_Word,
    pub gt_bytes: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_33__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_33__bindgen_ty_2>(),
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_33__bindgen_ty_2>(),
               4usize);
}
impl Clone for _bindgen_ty_33__bindgen_ty_2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[test]
fn bindgen_test_layout__bindgen_ty_33() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_33>(), 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_33>(), 4usize);
}
impl Clone for _bindgen_ty_33 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_gptab = _bindgen_ty_33;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_34 {
    pub ri_gprmask: Elf32_Word,
    pub ri_cprmask: [Elf32_Word; 4usize],
    pub ri_gp_value: Elf32_Sword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_34() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_34>(), 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_34>(), 4usize);
}
impl Clone for _bindgen_ty_34 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_RegInfo = _bindgen_ty_34;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_35 {
    pub kind: ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_uchar,
    pub section: Elf32_Section,
    pub info: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_35() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_35>(), 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_35>(), 4usize);
}
impl Clone for _bindgen_ty_35 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf_Options = _bindgen_ty_35;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_36 {
    pub hwp_flags1: Elf32_Word,
    pub hwp_flags2: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_36() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_36>(), 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_36>(), 4usize);
}
impl Clone for _bindgen_ty_36 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf_Options_Hw = _bindgen_ty_36;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_37 {
    pub l_name: Elf32_Word,
    pub l_time_stamp: Elf32_Word,
    pub l_checksum: Elf32_Word,
    pub l_version: Elf32_Word,
    pub l_flags: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_37() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_37>(), 20usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_37>(), 4usize);
}
impl Clone for _bindgen_ty_37 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf32_Lib = _bindgen_ty_37;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_38 {
    pub l_name: Elf64_Word,
    pub l_time_stamp: Elf64_Word,
    pub l_checksum: Elf64_Word,
    pub l_version: Elf64_Word,
    pub l_flags: Elf64_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_38() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_38>(), 20usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_38>(), 4usize);
}
impl Clone for _bindgen_ty_38 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf64_Lib = _bindgen_ty_38;
pub type Elf32_Conflict = Elf32_Addr;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_39 {
    pub version: Elf32_Half,
    pub isa_level: ::std::os::raw::c_uchar,
    pub isa_rev: ::std::os::raw::c_uchar,
    pub gpr_size: ::std::os::raw::c_uchar,
    pub cpr1_size: ::std::os::raw::c_uchar,
    pub cpr2_size: ::std::os::raw::c_uchar,
    pub fp_abi: ::std::os::raw::c_uchar,
    pub isa_ext: Elf32_Word,
    pub ases: Elf32_Word,
    pub flags1: Elf32_Word,
    pub flags2: Elf32_Word,
}
#[test]
fn bindgen_test_layout__bindgen_ty_39() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_39>(), 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_39>(), 4usize);
}
impl Clone for _bindgen_ty_39 {
    fn clone(&self) -> Self {
        *self
    }
}
pub type Elf_MIPS_ABIFlags_v0 = _bindgen_ty_39;
pub type Elf_Symndx = u32;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dl_phdr_info {
    pub dlpi_addr: Elf64_Addr,
    pub dlpi_name: *const ::std::os::raw::c_char,
    pub dlpi_phdr: *const Elf64_Phdr,
    pub dlpi_phnum: Elf64_Half,
    pub dlpi_adds: ::std::os::raw::c_ulonglong,
    pub dlpi_subs: ::std::os::raw::c_ulonglong,
    pub dlpi_tls_modid: usize,
    pub dlpi_tls_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_dl_phdr_info() {
    assert_eq!(::std::mem::size_of::<dl_phdr_info>(), 64usize);
    assert_eq!(::std::mem::align_of::<dl_phdr_info>(), 8usize);
}
impl Clone for dl_phdr_info {
    fn clone(&self) -> Self {
        *self
    }
}
extern "C" {
    pub fn dl_iterate_phdr(__callback:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut dl_phdr_info,
                                                                          arg2:
                                                                              usize,
                                                                          arg3:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           __data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
