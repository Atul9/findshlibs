/* automatically generated by rust-bindgen */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]

pub type Elf64_Half = u16;
pub type Elf64_Word = u32;
pub type Elf64_Xword = u64;
pub type Elf64_Addr = u64;
pub type Elf64_Off = u64;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_16 {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16>() , 56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16>() , 8usize);
}
impl Clone for _bindgen_ty_16 {
    fn clone(&self) -> Self { *self }
}
pub type Elf64_Phdr = _bindgen_ty_16;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dl_phdr_info {
    pub dlpi_addr: Elf64_Addr,
    pub dlpi_name: *const ::std::os::raw::c_char,
    pub dlpi_phdr: *const Elf64_Phdr,
    pub dlpi_phnum: Elf64_Half,
    pub dlpi_adds: ::std::os::raw::c_ulonglong,
    pub dlpi_subs: ::std::os::raw::c_ulonglong,
    pub dlpi_tls_modid: usize,
    pub dlpi_tls_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_dl_phdr_info() {
    assert_eq!(::std::mem::size_of::<dl_phdr_info>() , 64usize);
    assert_eq!(::std::mem::align_of::<dl_phdr_info>() , 8usize);
}
impl Clone for dl_phdr_info {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn dl_iterate_phdr(__callback:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut dl_phdr_info,
                                                                          arg2:
                                                                              usize,
                                                                          arg3:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           __data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
